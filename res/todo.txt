Directly from the todo.txt project at github.com/todotxt/todo.txt
---

A complete primer on the whys and hows of todo.txt.

The first and most important rule of todo.txt:

    A single line in your todo.txt text file represents a single task.

Why plain text?
---------------

Plain text is software and operating system agnostic. It's searchable,
portable, lightweight, and easily manipulated. It's unstructured. It works when
someone else's web server is down or your Outlook .PST file is corrupt. There's
no exporting and importing, no databases or tags or flags or stars or
prioritizing or insert company name here-induced rules on what you can and
can't do with it.  The 3 axes of an effective todo list

Using special notation in todo.txt, you can create a list that's sliceable by 3
key axes.

Priority
========

Your todo list should be able to tell you what's the next most important thing
for you to get done - either by project or by context or overall. You can
optionally assign tasks a priority that'll bubble them up to the top of the
list.

Project
=======

The only way to move a big project forward is to tackle a small subtask
associated with it. Your todo.txt should be able to list out all the tasks
specific to a project.

In order to move along a project like "Cleaning out the garage," my task list
should give me the next logical action to take in order to move that project
along. "Clean out the garage" isn't a good todo item; but "Call Goodwill to
schedule pickup" in the "Clean out garage" project is.

Context
=======

Getting Things Done author David Allen suggests splitting up your task lists by
context - ie, the place and situation where you'll work on the job. Messages
that you need to send go in the @email context; calls to be made @phone,
household projects @home.

That way, when you've got a few minutes in the car with your cell phone, you
can easily check your @phone tasks and make a call or two while you have the
opportunity.

This is all possible inside todo.txt.
---
